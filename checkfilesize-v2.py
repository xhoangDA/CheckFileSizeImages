import sys
import time
import datetime
from src.args import arguments
from src import compareAlgorithms
from src import extractImage
# from src import terminalActions

argValues = arguments.argsFunc()
algorithms = compareAlgorithms
extractImageAlgs = extractImage
# TerminalActions = terminalActions

storedPath1 = ""
storedPath2 = ""
dirPath1 = ""
dirPath2 = ""
containerID1 = ""
containerID2 = ""
filesDir1 = []
filesDir2 = []
listFiles = []
result = []

def pullImages():
    try:
        print('*** Ki·ªÉm tra t·ªìn t·∫°i images...')
        if not argValues[0]:
            extractImageAlgs.log('\t  INFO: Gi√° tr·ªã old image ƒë·ªÉ tr·ªëng.')
            extractImageAlgs.log('\t  INFO: B·ªè qua old image.')
            checkExistImage1 = 2
        else:
            checkExistImage1 = extractImageAlgs.checkExistImage(argValues[0])

        checkExistImage2 = extractImageAlgs.checkExistImage(argValues[1])

        if checkExistImage1 == 0:
            extractImageAlgs.log(f"\tINFO: Old image ƒë√£ t·ªìn t·∫°i. B·ªè qua pull image.")
        elif checkExistImage1 == 2:
            pass
        else:
            extractImageAlgs.log(f"\tINFO: Old image ch∆∞a t·ªìn t·∫°i. Th·ª±c hi·ªán k√©o image {argValues[0]}...")
            exitCodePullImage1 = extractImageAlgs.pullImage(argValues[0])
            if exitCodePullImage1 == 0:
                extractImageAlgs.log(f'\tINFO: K√©o image {argValues[0]} ho√†n t·∫•t.')
            else:
                extractImageAlgs.log(f'\tERROR: K√©o image {argValues[0]} th·∫•t b·∫°i. ‚ùå')
                sys.exit(100)

        if checkExistImage2 == 0:
            extractImageAlgs.log(f"\tINFO: New image ƒë√£ t·ªìn t·∫°i. B·ªè qua pull image.")
        else:
            extractImageAlgs.log(f"\tINFO: New image ch∆∞a t·ªìn t·∫°i. Th·ª±c hi·ªán k√©o image {argValues[1]}...")
            exitCodePullImage2 = extractImageAlgs.pullImage(argValues[1])
            if exitCodePullImage2 == 0:
                extractImageAlgs.log(f'\tINFO: K√©o image {argValues[1]} ho√†n t·∫•t.')
            else:
                # extractImageAlgs.log(f'\tERROR: K√©o image {argValues[1]} th·∫•t b·∫°i. ‚ùå')  
                sys.exit(100)

    except Exception as e:
        extractImageAlgs.log(f"\tERROR: {e}")
        sys.exit(100)

def extractFiles2Image():
    global listFiles
    global filesDir1
    global filesDir2
    global dirPath1
    global dirPath2
    global containerID1
    global containerID2
    global storedPath1
    global storedPath2
    try:
        print('*** Tr√≠ch xu·∫•t image...')
        # if not algorithms.checkPath(argValues[1], argValues[2]):
        #     breakpoint = True
        #     pathError = True
        #     print('\n‚ùåüò®üò® ERROR: ƒê∆∞·ªùng d·∫´n 2 kh√¥ng ƒë√∫ng v·ªõi m√£ ph√°t h√†nh m·ªõi. Vui l√≤ng ki·ªÉm tra l·∫°i.')
        #     sys.exit()
        if not argValues[0]:
            extractImageAlgs.log('\tINFO: B·ªè qua tr√≠ch xu·∫•t old image.')
        else:
            extractImageAlgs.log('\tINFO: Tr√≠ch xu·∫•t old image...')
            extractOutput1 = extractImageAlgs.process_to_copy_from_container_to_host(argValues[0])
            storedPath1 = extractOutput1[0]
            containerID1 = extractOutput1[1]
            extractImageAlgs.log('\tINFO: Tr√≠ch xu·∫•t old image ho√†n t·∫•t. ‚úÖ')
        time.sleep(0.5)
        extractImageAlgs.log('\tINFO: Tr√≠ch xu·∫•t new image...')
        extractOutput2 = extractImageAlgs.process_to_copy_from_container_to_host(argValues[1])
        storedPath2 = extractOutput2[0]
        containerID2 = extractOutput2[1]
        extractImageAlgs.log('\tINFO: Tr√≠ch xu·∫•t new image ho√†n t·∫•t. ‚úÖ')

    except Exception as e:
        extractImageAlgs.log(f"\tERROR: Tr√≠ch xu·∫•t file th·∫•t b·∫°i. ‚ùå")
        print(f"==> Error detail: {e}")
        sys.exit(100)

def getFiles2Folder():
    global listFiles
    global filesDir1
    global filesDir2
    global storedPath1
    global storedPath2
    try:
        print('*** Duy·ªát files...')
        # if not algorithms.checkPath(argValues[1], argValues[2]):
        #     breakpoint = True
        #     pathError = True
        #     print('\n‚ùåüò®üò® ERROR: ƒê∆∞·ªùng d·∫´n 2 kh√¥ng ƒë√∫ng v·ªõi m√£ ph√°t h√†nh m·ªõi. Vui l√≤ng ki·ªÉm tra l·∫°i.')
        #     sys.exit()
        if not argValues[0]:
            extractImageAlgs.log('\tINFO: Duy·ªát files tr√™n th∆∞ m·ª•c 1')
            filesDir1 = [['', '', '', 0, '', '']]
            listFiles.append(filesDir1)
            extractImageAlgs.log('\tINFO: Duy·ªát th∆∞ m·ª•c 1 ho√†n t·∫•t. ‚úÖ')
        else:
            extractImageAlgs.log('\tINFO: Duy·ªát files tr√™n th∆∞ m·ª•c 1...')
            filesDir1 = algorithms.getFiles(storedPath1)
            listFiles.append(filesDir1)
            extractImageAlgs.log('\tINFO: Duy·ªát th∆∞ m·ª•c 1 ho√†n t·∫•t. ‚úÖ')
        time.sleep(0.5)
        extractImageAlgs.log('\tINFO: Duy·ªát files tr√™n th∆∞ m·ª•c 2...')
        filesDir2 = algorithms.getFiles(storedPath2)
        extractImageAlgs.log('\tINFO: Duy·ªát th∆∞ m·ª•c 2 ho√†n t·∫•t. ‚úÖ')
        # extractImageAlgs.log(filesDir1)
        listFiles.append(filesDir2)
    
    except Exception as e:
        extractImageAlgs.log(f"\tERROR: Duy·ªát file th·∫•t b·∫°i. ‚ùå")
        print(f"==> Error detail: {e}")
        sys.exit(100)

def compare():
    print('*** So s√°nh files...')
    global result
    global listFiles
    try:
        compareResult = algorithms.compareList(listFiles[0], listFiles[1])
        result.append(listFiles[0])
        result.append(listFiles[1])
        result.append(compareResult)
        extractImageAlgs.log(f"\tINFO: So s√°nh file ho√†n t·∫•t. ‚úÖ")
    except Exception as e:
        extractImageAlgs.log(f"\tERROR: So s√°nh file th·∫•t b·∫°i. ‚ùå")
        print(f"==> Error detail: {e}")
        sys.exit(100)

def output():
    global finishOutput
    global failOutput
    global result
    print('*** Xu·∫•t file k·∫øt qu·∫£...')
    try:
        fileOutput = algorithms.writeToExcelFile(result[0], result[1], result[2], argValues[0], argValues[1], argValues[2], argValues[3])
        extractImageAlgs.log(f"\tINFO: Xu·∫•t file k·∫øt qu·∫£ ho√†n t·∫•t ‚úÖ")
        extractImageAlgs.log(f"\tINFO: ƒê∆∞·ªùng d·∫´n file k·∫øt qu·∫£: {fileOutput}")
        # TerminalActions.createTable(result[2])
    except Exception as e:
        extractImageAlgs.log(f"\tERROR: {e}")
        sys.exit(100)

def clean():
    global storedPath1
    global storedPath2
    global containerID1
    global containerID2
    print('*** D·ªçn d·∫πp sau ki·ªÉm tra...')
    try:
        cleanReturnCode = extractImageAlgs.clean(containerID1, containerID2, argValues[0], argValues[1], storedPath1, storedPath2)
        if cleanReturnCode != None: 
            if all(element == 0 for element in cleanReturnCode):
                extractImageAlgs.log(f"\tINFO: D·ªçn d·∫πp ho√†n t·∫•t ‚úÖ")
            else: 
                sys.exit(100)
        else: 
            sys.exit(100)
    except Exception as e:
        extractImageAlgs.log(f"\tERROR: {e}")
        sys.exit(100)

if __name__ == "__main__":
    print('''
       _               _            __ _ _                 _                     _              _ 
      | |             | |          / _(_) |               (_)                   | |            | |
   ___| |__   ___  ___| | ________| |_ _| | ___ ______ ___ _ _______  ___ ______| |_ ___   ___ | |
  / __| '_ \ / _ \/ __| |/ /______|  _| | |/ _ \______/ __| |_  / _ \/ __|______| __/ _ \ / _ \| |
 | (__| | | |  __/ (__|   <       | | | | |  __/      \__ \ |/ /  __/\__ \      | || (_) | (_) | |
  \___|_| |_|\___|\___|_|\_\      |_| |_|_|\___|      |___/_/___\___||___/       \__\___/ \___/|_|                                                                                                                                                         
    ''')
    print(f"""
INPUT:
[+] OLD IMAGE:      {argValues[0]}
[+] NEW IMAGE:      {argValues[1]}
[+] PRODUCT NAME:   {argValues[2]}
[+] VERSION:        {argValues[3]}
""")
    print("B·∫ÆT ƒê·∫¶U TH·ª∞C HI·ªÜN CHECKFILESIZE\n")
    start = time.time()
    time.sleep(0.5)
    pullImages()
    time.sleep(0.5)
    extractFiles2Image()
    getFiles2Folder()
    end = time.time()
    compare()
    output()
    clean()
    print('CHECKFILESIZE TH√ÄNH C√îNG !!!')
    print("T·ªïng th·ªùi gian ch·∫°y: " + str(end - start))
